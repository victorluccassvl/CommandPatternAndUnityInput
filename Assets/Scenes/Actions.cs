//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scenes/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""TestMap1"",
            ""id"": ""49ead180-4dd6-4b10-8490-ebc9d42bf65f"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9540af5b-2e75-4d78-974b-319f4dfdfe32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inflate"",
                    ""type"": ""Value"",
                    ""id"": ""331ff042-a7cb-48ba-b719-3ce255bc9944"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a104cc98-7b6c-43c4-ab46-4e7c83f62684"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65a46cff-8f5f-49d9-ad59-bd8d60612dc9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67e6721b-fdd7-41b3-a5f6-b30dfdf7d58e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Inflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cb0f3495-25f3-4900-a53a-460a13110def"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8b6704e3-77b3-4eb5-a044-e8311e2eeca6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69ffa36a-15e0-41ea-8bc6-f1bf941611c9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f52d8b18-ba4c-4381-a5fe-8a420adcb6da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""997f513c-fcd5-4b01-b8dd-c1df82a45a4c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TestMap2"",
            ""id"": ""0016e79a-f147-4af9-9cb3-f278609f7357"",
            ""actions"": [
                {
                    ""name"": ""Sidestep"",
                    ""type"": ""Button"",
                    ""id"": ""6cc0b6a5-6dbe-4332-9f77-098d0a5f135f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deflate"",
                    ""type"": ""Value"",
                    ""id"": ""eae70ed1-aea2-40cd-b486-98323664c1f4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""897d2068-ea5c-47b4-bcf3-de0c6b937107"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0636816-b886-4880-a88a-d3362dade3d1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Sidestep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd35cc60-08fc-4715-9287-33113291b133"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Deflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c355d47c-a356-47c3-923f-14f02349a553"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""64c991c6-0159-4d18-9683-474cee348f99"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""296098be-9afc-4b24-8360-b4a391c71946"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""739d4734-b697-41c5-9d22-7deb7e34874a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e7467e8d-3b1f-4825-b6f3-faeef259ef6f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme;MouseAndKeyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ControlScheme"",
            ""bindingGroup"": ""ControlScheme"",
            ""devices"": []
        },
        {
            ""name"": ""EmptyScheme"",
            ""bindingGroup"": ""EmptyScheme"",
            ""devices"": []
        },
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TestMap1
        m_TestMap1 = asset.FindActionMap("TestMap1", throwIfNotFound: true);
        m_TestMap1_Jump = m_TestMap1.FindAction("Jump", throwIfNotFound: true);
        m_TestMap1_Inflate = m_TestMap1.FindAction("Inflate", throwIfNotFound: true);
        m_TestMap1_Move = m_TestMap1.FindAction("Move", throwIfNotFound: true);
        // TestMap2
        m_TestMap2 = asset.FindActionMap("TestMap2", throwIfNotFound: true);
        m_TestMap2_Sidestep = m_TestMap2.FindAction("Sidestep", throwIfNotFound: true);
        m_TestMap2_Deflate = m_TestMap2.FindAction("Deflate", throwIfNotFound: true);
        m_TestMap2_Rotate = m_TestMap2.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestMap1
    private readonly InputActionMap m_TestMap1;
    private ITestMap1Actions m_TestMap1ActionsCallbackInterface;
    private readonly InputAction m_TestMap1_Jump;
    private readonly InputAction m_TestMap1_Inflate;
    private readonly InputAction m_TestMap1_Move;
    public struct TestMap1Actions
    {
        private @Actions m_Wrapper;
        public TestMap1Actions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_TestMap1_Jump;
        public InputAction @Inflate => m_Wrapper.m_TestMap1_Inflate;
        public InputAction @Move => m_Wrapper.m_TestMap1_Move;
        public InputActionMap Get() { return m_Wrapper.m_TestMap1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestMap1Actions set) { return set.Get(); }
        public void SetCallbacks(ITestMap1Actions instance)
        {
            if (m_Wrapper.m_TestMap1ActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnJump;
                @Inflate.started -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnInflate;
                @Inflate.performed -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnInflate;
                @Inflate.canceled -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnInflate;
                @Move.started -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TestMap1ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_TestMap1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Inflate.started += instance.OnInflate;
                @Inflate.performed += instance.OnInflate;
                @Inflate.canceled += instance.OnInflate;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public TestMap1Actions @TestMap1 => new TestMap1Actions(this);

    // TestMap2
    private readonly InputActionMap m_TestMap2;
    private ITestMap2Actions m_TestMap2ActionsCallbackInterface;
    private readonly InputAction m_TestMap2_Sidestep;
    private readonly InputAction m_TestMap2_Deflate;
    private readonly InputAction m_TestMap2_Rotate;
    public struct TestMap2Actions
    {
        private @Actions m_Wrapper;
        public TestMap2Actions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sidestep => m_Wrapper.m_TestMap2_Sidestep;
        public InputAction @Deflate => m_Wrapper.m_TestMap2_Deflate;
        public InputAction @Rotate => m_Wrapper.m_TestMap2_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_TestMap2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestMap2Actions set) { return set.Get(); }
        public void SetCallbacks(ITestMap2Actions instance)
        {
            if (m_Wrapper.m_TestMap2ActionsCallbackInterface != null)
            {
                @Sidestep.started -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnSidestep;
                @Sidestep.performed -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnSidestep;
                @Sidestep.canceled -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnSidestep;
                @Deflate.started -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnDeflate;
                @Deflate.performed -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnDeflate;
                @Deflate.canceled -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnDeflate;
                @Rotate.started -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_TestMap2ActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_TestMap2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Sidestep.started += instance.OnSidestep;
                @Sidestep.performed += instance.OnSidestep;
                @Sidestep.canceled += instance.OnSidestep;
                @Deflate.started += instance.OnDeflate;
                @Deflate.performed += instance.OnDeflate;
                @Deflate.canceled += instance.OnDeflate;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public TestMap2Actions @TestMap2 => new TestMap2Actions(this);
    private int m_ControlSchemeSchemeIndex = -1;
    public InputControlScheme ControlSchemeScheme
    {
        get
        {
            if (m_ControlSchemeSchemeIndex == -1) m_ControlSchemeSchemeIndex = asset.FindControlSchemeIndex("ControlScheme");
            return asset.controlSchemes[m_ControlSchemeSchemeIndex];
        }
    }
    private int m_EmptySchemeSchemeIndex = -1;
    public InputControlScheme EmptySchemeScheme
    {
        get
        {
            if (m_EmptySchemeSchemeIndex == -1) m_EmptySchemeSchemeIndex = asset.FindControlSchemeIndex("EmptyScheme");
            return asset.controlSchemes[m_EmptySchemeSchemeIndex];
        }
    }
    private int m_MouseAndKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    public interface ITestMap1Actions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnInflate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ITestMap2Actions
    {
        void OnSidestep(InputAction.CallbackContext context);
        void OnDeflate(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
